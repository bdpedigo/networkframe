{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#networkframe","title":"<code>networkframe</code>","text":"<p>Lightweight representations of networks using Pandas DataFrames.</p> <ul> <li>Documentation: https://bdpedigo.github.io/networkframe</li> <li>GitHub: https://github.com/bdpedigo/networkframe</li> <li>PyPI: https://pypi.org/project/networkframe/</li> <li>Free software: MIT</li> </ul> <p><code>networkframe</code> uses Pandas DataFrames to represent networks in a lightweight way. A <code>NetworkFrame</code> object is simply a table representing nodes and a table representing edges, and a variety of methods to make querying and manipulating that data easy.</p>"},{"location":"#is-networkframe-right-for-you","title":"Is <code>networkframe</code> right for you?","text":"<p>Pros:</p> <ul> <li>Lightweight: <code>NetworkFrame</code> objects are just two DataFrames, so they're easy to manipulate and integrate with other tools.</li> <li>Interoperable: can output to <code>NetworkX</code>, <code>numpy</code> and <code>scipy</code> sparse matrices, and other formats (coming soon).</li> <li>Flexible: can represent directed, undirected, and multigraphs.</li> <li>Familiar: if you're familiar with <code>Pandas</code> <code>DataFrames</code>, that is. As much as possible, <code>networkframe</code> uses the same syntax as <code>Pandas</code>, but also just gives you access to the underlying tables.</li> <li>Extensible: it's easy to use <code>NetworkFrame</code> as a base graph - for instance, you could make a <code>SpatialNetworkFrame</code> that adds spatial information to the nodes and edges.</li> </ul> <p>Cons:</p> <ul> <li>No guarantees: since <code>networkframe</code> gives you access to the underlying <code>DataFrames</code>, it doesn't do much validation of the data.</li> <li>Not optimized for graph computations: since <code>networkframe</code> is storing data as simple node and edge tables, it's not optimized for doing actual computations on those graphs (e.g. like searching for shortest paths). A typical workflow would be to use <code>networkframe</code> to load and manipulate your data, then convert to a more graph-oriented format like <code>scipy</code> sparse matrices or <code>NetworkX</code> for computations.</li> </ul> <p>Room for improvement:</p> <ul> <li>Early development: there are likely bugs and missing features. Please report any issues you find!</li> <li>More interoperability: <code>networkframe</code> can currently output to <code>NetworkX</code>, <code>numpy</code> and <code>scipy</code> sparse matrices, and other formats (coming soon). It would be nice to be able to read in from these formats as well.</li> <li>Graph-type handling: <code>networkframe</code> has mainly been tested on directed graphs, less so for undirected and multigraphs.</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the bdpedigo/cookiecutter-pypackage project template (which builds on several previous versions).</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>correct something</li> </ul>"},{"location":"changelog/#v031-2023-12-14","title":"v0.3.1 (2023-12-14)","text":""},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>fix improper commitizen spec</li> </ul>"},{"location":"changelog/#v030-2023-12-14","title":"v0.3.0 (2023-12-14)","text":""},{"location":"changelog/#v021-2023-12-13","title":"v0.2.1 (2023-12-13)","text":""},{"location":"changelog/#v020-2023-12-13","title":"v0.2.0 (2023-12-13)","text":""},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/bdpedigo/networkframe/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>networkframe could always use more documentation, whether as part of the official networkframe docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/bdpedigo/networkframe/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome.</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started","text":"<p>Ready to contribute? Here's how to set up <code>networkframe</code> for local development.</p> <ol> <li>Fork the <code>networkframe</code> repo on GitHub.</li> <li>Clone your fork locally</li> </ol> <pre><code>git clone git@github.com:your_name_here/networkframe.git\n</code></pre> <ol> <li>Ensure poetry is installed.</li> <li>Install dependencies and start your virtualenv:</li> </ol> <pre><code>poetry install --with dev\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</li> </ol> <pre><code>poetry run tox\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>Check https://github.com/bdpedigo/networkframe/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>poetry run pytest tests/test_networkframe.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>poetry run bump2version patch # possible: major / minor / patch\ngit push\ngit push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install <code>networkframe</code>, run this command in your terminal:</p> <pre><code>pip install networkframe\n</code></pre> <p>This is the preferred method to install <code>networkframe</code>, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for <code>networkframe</code> can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/bdpedigo/networkframe\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/bdpedigo/networkframe/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre> <p>Or in editable mode, it can be installed with:</p> <pre><code>pip install -e .\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>To use <code>networkframe</code> in a project</p> <pre><code>import networkframe\n</code></pre>"},{"location":"reference/networkframe/","title":"NetworkFrame","text":""},{"location":"reference/networkframe/#networkframe.NetworkFrame","title":"<code>networkframe.NetworkFrame(nodes, edges, directed=True, sources=None, targets=None)</code>","text":"<p>Represent a network as a pair of DataFrames, one for nodes and one for edges.</p> <p>Parameters:</p> Name Type Description Default <code>nodes</code> <code>pd.DataFrame</code> <p>Table of node attributes. The node IDs must be in the index.</p> required <code>edges</code> <code>pd.DataFrame</code> <p>Table of edges, with source and target columns which correspond with the node IDs in<code>nodes.index</code>.</p> required <code>directed</code> <code>bool</code> <p>Whether the network should be treated as directed.</p> <code>True</code> <code>sources</code> <code>Optional[pd.Index]</code> <p>Specification of source nodes if representing a subgraph.</p> <code>None</code> <code>targets</code> <code>Optional[pd.Index]</code> <p>Specification of target nodes if representing a subgraph.</p> <code>None</code>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.loc","title":"<code>loc: LocIndexer</code>  <code>property</code>","text":"<p>Access a subgraph by node ID(s).</p> <p><code>.loc[]</code> is primarily label based, but in the future a boolean array may be supported. Currently, <code>.loc</code> only supports selecting both rows and columns, i.e. <code>nf.loc[row_indexer, column_indexer]</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from networkframe import NetworkFrame\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; nodes = pd.DataFrame(\n...     {\n...         \"name\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n...         \"color\": [\"red\", \"blue\", \"blue\", \"red\", \"blue\"],\n...     },\n...     index=[0, 1, 2, 3, 4],\n... )\n&gt;&gt;&gt; edges = pd.DataFrame(\n...     {\n...         \"source\": [0, 1, 2, 3, 4],\n...         \"target\": [1, 2, 3, 4, 0],\n...         \"weight\": [1, 2, 3, 4, 5],\n...     }\n... )\n&gt;&gt;&gt; nf = NetworkFrame(nodes, edges)\n&gt;&gt;&gt; sub_nf = nf.loc[[1, 2], [2, 3]]\n&gt;&gt;&gt; sub_nf\nNetworkFrame(nodes=(3, 1), edges=(2, 3))\n&gt;&gt;&gt; sub_nf.to_adjacency()\ntarget  2  3\nsource\n1       2  0\n2       0  3\n</code></pre>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.source_nodes","title":"<code>source_nodes: pd.DataFrame</code>  <code>property</code>","text":"<p>Return the source nodes of the network and their metadata.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.sources","title":"<code>sources: pd.Index</code>  <code>property</code>","text":"<p>Source node IDs of the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.target_nodes","title":"<code>target_nodes: pd.DataFrame</code>  <code>property</code>","text":"<p>Return the target nodes of the network and their metadata.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.targets","title":"<code>targets: pd.Index</code>  <code>property</code>","text":"<p>Return the target node IDs of the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Check if two NetworkFrames are equal.</p> <p>Note that this considers both node/edge names and features. It does not consider the order of the nodes/edges. It does not consider the indexing of the edges. This may change in a future release.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.__len__","title":"<code>__len__()</code>","text":"<p>Return the number of nodes in the network.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of nodes in the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Check if two NetworkFrames are not equal.</p> <p>Note that this considers both node/edge names and features. It does not consider the order of the nodes/edges. It does not consider the indexing of the edges. This may change in a future release.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the NetworkFrame.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string representation of the NetworkFrame.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.add_edges","title":"<code>add_edges(new_edges, inplace=False)</code>","text":"<p>Add edges to the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.add_nodes","title":"<code>add_nodes(new_nodes, inplace=False)</code>","text":"<p>Add nodes to the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.apply_node_features","title":"<code>apply_node_features(columns, axis='both', inplace=False)</code>","text":"<p>Apply node features to the edges dataframe.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.connected_components","title":"<code>connected_components()</code>","text":"<p>Return the connected components of the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.copy","title":"<code>copy()</code>","text":"<p>Return a copy of the NetworkFrame.</p> <p>Returns:</p> Type Description <code>NetworkFrame</code> <p>A copy of the NetworkFrame.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.from_dict","title":"<code>from_dict(d, orient='columns', index_dtype=int)</code>  <code>classmethod</code>","text":"<p>Return a NetworkFrame from a dictionary representation.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.groupby_nodes","title":"<code>groupby_nodes(by=None, axis='both', **kwargs)</code>","text":"<p>Group the frame by node data for the source or target (or both).</p> <p>Parameters:</p> Name Type Description Default <code>by</code> <code>_type_</code> <p>description, by default None</p> <code>None</code> <code>axis</code> <code>str</code> <p>description, by default 'both'</p> <code>'both'</code> <p>Returns:</p> Type Description <code>_type_</code> <p>description</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>description</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.is_fully_connected","title":"<code>is_fully_connected()</code>","text":"<p>Return whether the network is fully connected.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.label_nodes_by_component","title":"<code>label_nodes_by_component(inplace=False, name='component')</code>","text":"<p>Add a column labeling nodes by which connected component they are in.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.largest_connected_component","title":"<code>largest_connected_component(inplace=False, verbose=False)</code>","text":"<p>Return the largest connected component of the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.n_connected_components","title":"<code>n_connected_components()</code>","text":"<p>Return the number of connected components of the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.query_edges","title":"<code>query_edges(expr, inplace=False, local_dict=None, global_dict=None)</code>","text":"<p>Select a subnetwork via a query the <code>.edges</code> DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>expr</code> <code>str</code> <p>The query to use on <code>.edges</code>. See pandas.DataFrame.query for more information.</p> required <code>inplace</code> <p>Whether to modify the <code>NetworkFrame</code> rather than returning a new one.</p> <code>False</code> <code>local_dict</code> <p>A dictionary of local variables. Useful for using the <code>@</code> expressions in [pandas.DataFrame.query]. It may be useful to pass <code>local_dict=locals()</code> to accomplish this.</p> <code>None</code> <code>global_dict</code> <p>A dictionary of global variables. Useful for using the <code>@</code> expressions in [pandas.DataFrame.query]. It may be useful to pass <code>global_dict=globals()</code> to accomplish this.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[NetworkFrame]</code> <p>A new NetworkFrame for the subnetwork. If <code>inplace=True</code>, returns <code>None</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from networkframe import NetworkFrame\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; nodes = pd.DataFrame(\n...     {\n...         \"name\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n...         \"color\": [\"red\", \"blue\", \"blue\", \"red\", \"blue\"],\n...     },\n...     index=[0, 1, 2, 3, 4],\n... )\n&gt;&gt;&gt; edges = pd.DataFrame(\n...     {\n...         \"source\": [0, 1, 2, 3, 4],\n...         \"target\": [1, 2, 3, 4, 0],\n...         \"weight\": [1, 2, 3, 4, 5],\n...     }\n... )\n&gt;&gt;&gt; nf = NetworkFrame(nodes, edges)\n&gt;&gt;&gt; sub_nf = nf.query_edges(\"weight &gt; 2\") # select subnetwork of edges with weight &gt; 2\n&gt;&gt;&gt; sub_nf\nNetworkFrame(nodes=(5, 2), edges=(3, 3))\n</code></pre>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.query_nodes","title":"<code>query_nodes(expr, inplace=False, local_dict=None, global_dict=None)</code>","text":"<p>Select a subnetwork via a query the <code>.nodes</code> DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>expr</code> <code>str</code> <p>The query to use on <code>.nodes</code>. See pandas.DataFrame.query for more information.</p> required <code>inplace</code> <p>Whether to modify the <code>NetworkFrame</code> rather than returning a new one.</p> <code>False</code> <code>local_dict</code> <p>A dictionary of local variables. Useful for using the <code>@</code> expressions in [pandas.DataFrame.query]. It may be useful to pass <code>local_dict=locals()</code> to accomplish this.</p> <code>None</code> <code>global_dict</code> <p>A dictionary of global variables. Useful for using the <code>@</code> expressions in [pandas.DataFrame.query]. It may be useful to pass <code>global_dict=globals()</code> to accomplish this.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[NetworkFrame]</code> <p>A new NetworkFrame for the subnetwork. If <code>inplace=True</code>, returns <code>None</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from networkframe import NetworkFrame\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; nodes = pd.DataFrame(\n...     {\n...         \"name\": [\"A\", \"B\", \"C\", \"D\", \"E\"],\n...         \"color\": [\"red\", \"blue\", \"blue\", \"red\", \"blue\"],\n...     },\n...     index=[0, 1, 2, 3, 4],\n... )\n&gt;&gt;&gt; edges = pd.DataFrame(\n...     {\n...         \"source\": [0, 1, 2, 3, 4],\n...         \"target\": [1, 2, 3, 4, 0],\n...         \"weight\": [1, 2, 3, 4, 5],\n...     }\n... )\n&gt;&gt;&gt; nf = NetworkFrame(nodes, edges)\n&gt;&gt;&gt; sub_nf = nf.query_nodes(\"color == 'red'\") # select subnetwork of red nodes\n&gt;&gt;&gt; sub_nf\nNetworkFrame(nodes=(2, 2), edges=(2, 3))\n</code></pre>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.reindex_nodes","title":"<code>reindex_nodes(index)</code>","text":"<p>Reindex <code>.nodes</code>, also removes edges as necessary.</p> <p>See pandas.DataFrame.reindex for more information on reindexing.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>pd.Index</code> <p>The new index to use.</p> required <p>Returns:</p> Type Description <code>NetworkFrame</code> <p>A new NetworkFrame with the reindexed nodes.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.remove_edges","title":"<code>remove_edges(remove_edges, inplace=False)</code>","text":"<p>Remove edges from the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.remove_nodes","title":"<code>remove_nodes(nodes, inplace=False)</code>","text":"<p>Remove nodes from the network and remove edges that are no longer valid.</p> <p>Parameters:</p> Name Type Description Default <code>nodes</code> <code>Union[pd.DataFrame, pd.Index, list, np.ndarray]</code> <p>The index of nodes to remove. If a <code>pd.DataFrame</code> is passed, its index is used; otherwise the object is interpreted as an index-like.</p> required <p>Returns:</p> Type Description <code>Optional[NetworkFrame]</code> <p>A new NetworkFrame with the nodes removed. If <code>inplace=True</code>, returns <code>None</code>.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.remove_unused_nodes","title":"<code>remove_unused_nodes(inplace=False)</code>","text":"<p>Remove nodes that are not connected to any edges.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.to_adjacency","title":"<code>to_adjacency(weight_col='weight', aggfunc='sum')</code>","text":"<p>Return the adjacency matrix of the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.to_dict","title":"<code>to_dict(orient='dict')</code>","text":"<p>Return a dictionary representation of the NetworkFrame.</p> <p>Parameters:</p> Name Type Description Default <code>orient</code> <code>str</code> <p>The format of the dictionary according to pandas.DataFrame.to_dict.</p> <code>'dict'</code>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.to_json","title":"<code>to_json(orient='dict')</code>","text":"<p>Return a JSON representation of the NetworkFrame.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.to_networkx","title":"<code>to_networkx(create_using=None)</code>","text":"<p>Return a networkx graph of the network.</p> <p>Parameters:</p> Name Type Description Default <code>create_using</code> <code>Union[nx.Graph, nx.DiGraph, nx.MultiDiGraph, nx.MultiGraph]</code> <p>A NetworkX graph class to use to create the graph.</p> <code>None</code> <p>Returns:</p> Type Description <code>nx.Graph</code> <p>A NetworkX representation of the network.</p>"},{"location":"reference/networkframe/#networkframe.NetworkFrame.to_sparse_adjacency","title":"<code>to_sparse_adjacency(weight_col=None, aggfunc='sum', verify_integrity=True)</code>","text":"<p>Return the adjacency matrix of the network as a sparse array.</p>"},{"location":"reference/networkframe/#networkframe.LocIndexer","title":"<code>networkframe.LocIndexer(frame)</code>","text":"<p>A class for indexing a NetworkFrame using .loc.</p> <p>Indexer for NetworkFrame.</p>"},{"location":"reference/networkframe/#networkframe.LocIndexer.__getitem__","title":"<code>__getitem__(args)</code>","text":"<p>Return a NetworkFrame with the given labels.</p>"},{"location":"reference/nodegroupby/","title":"NodeGroupBy","text":""},{"location":"reference/nodegroupby/#networkframe.NodeGroupBy","title":"<code>networkframe.NodeGroupBy(frame, source_groupby, target_groupby)</code>","text":"<p>A class for grouping a NetworkFrame by a set of labels.</p> <p>Groupby on nodes.</p> <p>Parameters:</p> Name Type Description Default <code>frame</code> <code>_type_</code> <p>description</p> required <code>source_groupby</code> <code>_type_</code> <p>description</p> required <code>target_groupby</code> <code>_type_</code> <p>description</p> required"},{"location":"reference/nodegroupby/#networkframe.NodeGroupBy.has_source_groups","title":"<code>has_source_groups</code>  <code>property</code>","text":"<p>Whether the frame has row groups.</p>"},{"location":"reference/nodegroupby/#networkframe.NodeGroupBy.has_target_groups","title":"<code>has_target_groups</code>  <code>property</code>","text":"<p>Whether the frame has column groups.</p>"},{"location":"reference/nodegroupby/#networkframe.NodeGroupBy.source_groups","title":"<code>source_groups</code>  <code>property</code>","text":"<p>Return the row groups.</p>"},{"location":"reference/nodegroupby/#networkframe.NodeGroupBy.target_groups","title":"<code>target_groups</code>  <code>property</code>","text":"<p>Return the column groups.</p>"},{"location":"reference/nodegroupby/#networkframe.NodeGroupBy.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over the groups.</p>"},{"location":"reference/reference/","title":"Reference","text":"<p>Documentation for the top-level package of <code>networkframe</code>, which mainly consists of the <code>NetworkFrame</code> class.</p>"}]}